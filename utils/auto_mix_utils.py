import os
import tempfile
import numpy as np
from utils.utils import load_tracks
from pydub import AudioSegment
import librosa
import soundfile as sf


# ====== –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—Ä–æ—Å—Å—Ñ–µ–π–¥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (pydub) ======
# –¢—Ä–µ–±—É–µ—Ç: pip install pydub  –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π ffmpeg
def make_mix_simple(
    folder: str, output: str, crossfade_ms: int = 8000, bitrate: str = "320k"
):
    from pydub import AudioSegment, effects

    files = load_tracks(folder)
    if not files:
        raise RuntimeError("–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –≤ –ø–∞–ø–∫–µ.")

    files.sort(key=lambda x: os.path.basename(x).lower())

    print(f"üîπ Simple: –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ç—Ä–µ–∫–æ–≤, crossfade={crossfade_ms} –º—Å")

    mix = None
    for i, path in enumerate(files, 1):
        track = AudioSegment.from_file(path)
        track = effects.normalize(track)
        mix = track if mix is None else mix.append(track, crossfade=crossfade_ms)
        print(f"[{i}/{len(files)}] {os.path.basename(path)}")

    # —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–∏—Ä–∞–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    ext = os.path.splitext(output)[1].lstrip(".").lower() or "mp3"
    export_args = {"format": ext}
    if ext == "mp3":
        export_args["bitrate"] = bitrate
    mix.export(output, **export_args)
    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {output}")


# ====== –†–µ–∂–∏–º –ø–æ –±–∏—Ç–∞–º: –∫—Ä–æ—Å—Å—Ñ–µ–π–¥ –ø–æ —É–¥–∞—Ä–∞–º (librosa) ======
# –¢—Ä–µ–±—É–µ—Ç: pip install librosa soundfile numpy
def make_mix_beats(
    folder: str, output: str, xfade_beats: int = 16, mp3_bitrate: str = "320k"
):
    files = load_tracks(folder)
    if not files:
        raise RuntimeError("–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤ –≤ –ø–∞–ø–∫–µ.")

    files.sort(key=lambda x: os.path.basename(x).lower())

    print(f"üîπ Beat-aware: {len(files)} —Ç—Ä–µ–∫–æ–≤, xfade_beats={xfade_beats}")

    mix = None  # shape: (channels, samples)
    sr_global = None

    for i, path in enumerate(files, 1):
        # –°–¢–ï–†–ï–û –∑–∞–≥—Ä—É–∑–∫–∞: y shape -> (samples,) –∏–ª–∏ (channels, samples)
        y, sr = librosa.load(path, sr=None, mono=False)
        if y.ndim == 1:
            y = y[np.newaxis, :]  # -> (1, N)
        if sr_global is None:
            sr_global = sr

        # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º–ø–∞ –¥–µ–ª–∞–µ–º –º–æ–Ω–æ-–º–∏–∫—Å (–ù–ï –¥–ª—è –∑–≤—É–∫–∞)
        y_mono = librosa.to_mono(y)  # (N,)
        tempo, beats = librosa.beat.beat_track(y=y_mono, sr=sr, units="time")
        tempo_num = float(np.atleast_1d(tempo)[0])
        beats = np.asarray(beats, dtype=float).ravel()
        print(f"[{i}/{len(files)}] {os.path.basename(path)} ‚Äî ~{tempo_num:.1f} BPM")

        if mix is None:
            mix = y.astype(np.float32)
            continue

        # –¥–ª–∏–Ω–∞ –∫—Ä–æ—Å—Å—Ñ–µ–π–¥–∞: N-–π —É–¥–∞—Ä –∏–ª–∏ fallback 8 —Å–µ–∫
        if beats.size > xfade_beats:
            idx = min(xfade_beats, beats.size - 1)
            xfade = int(sr * float(beats[idx]))
        else:
            xfade = int(sr * 8.0)

        # –ü–æ–¥–≥–æ–Ω—è–µ–º –∫–∞–Ω–∞–ª—ã (–≤–¥—Ä—É–≥ —Ä–∞–∑–Ω—ã–µ —á–∏—Å–ª–∞ –∫–∞–Ω–∞–ª–æ–≤)
        ch_mix, ch_y = mix.shape[0], y.shape[0]
        if ch_mix != ch_y:
            # –ø—Ä–æ—Å—Ç–æ–π –¥–∞—É–Ω–º–∏–∫—Å/–∞–ø–º–∏–∫—Å
            if ch_mix == 1 and ch_y == 2:
                mix = np.vstack([mix, mix])  # mono -> pseudo-stereo
            elif ch_mix == 2 and ch_y == 1:
                y = np.vstack([y, y])  # mono -> pseudo-stereo

        # –í—ã–¥–µ–ª—è–µ–º –∫—É—Å–∫–∏ –¥–ª—è –∫—Ä–æ—Å—Å—Ñ–µ–π–¥–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Å–∏ (samples)
        a = mix[:, -xfade:] if mix.shape[1] >= xfade else mix
        b = y[:, :xfade] if y.shape[1] >= xfade else y

        n = min(a.shape[1], b.shape[1])
        if n == 0:
            mix = np.concatenate([mix, y], axis=1)
            continue

        # –°–∏–Ω—É—Å–Ω–∞—è –∫—Ä–∏–≤–∞—è ‚Äî –ø–ª–∞–≤–Ω—ã–π fade
        t = np.linspace(0.0, np.pi, n, dtype=np.float32)
        fade = (1.0 - np.cos(t)) / 2.0  # 0..1
        fade = fade[np.newaxis, :]  # -> (1, n) –¥–ª—è broadcast

        a = a[:, -n:] * (1.0 - fade)
        b = b[:, :n] * fade

        mixed_tail = a + b
        mix = np.concatenate([mix[:, :-(n)], mixed_tail, y[:, n:]], axis=1)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (–±–µ—Ä–µ–∂–Ω–∞—è)
    peak = float(np.max(np.abs(mix))) or 1.0
    mix = (mix / peak * 0.98).astype(np.float32)

    # –≠–∫—Å–ø–æ—Ä—Ç
    ext = os.path.splitext(output)[1].lower()
    if ext == ".mp3":
        # –ß–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV -> pydub -> MP3 (–±–∏—Ç—Ä–µ–π—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π)
        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp:
            tmp_wav = tmp.name
        try:
            # soundfile –∂–¥—ë—Ç (samples, channels), –ø–æ—ç—Ç–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ–º
            sf.write(tmp_wav, mix.T, sr_global, subtype="PCM_16")
            seg = AudioSegment.from_wav(tmp_wav)
            seg.export(output, format="mp3", bitrate=mp3_bitrate)
        finally:
            try:
                os.remove(tmp_wav)
            except Exception as e:
                print(f"Exception: {e}")
                pass
        print(f"‚úÖ MP3 —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output} @ {mp3_bitrate}")
    else:
        # WAV/FLAC –Ω–∞–ø—Ä—è–º—É—é
        data = mix.T  # (samples, channels)
        if ext not in (".wav", ".flac"):
            print("‚ÑπÔ∏è –õ—É—á—à–µ —É–∫–∞–∑–∞—Ç—å .mp3/.wav/.flac. –°–æ—Ö—Ä–∞–Ω—è—é .wav.")
            output = os.path.splitext(output)[0] + ".wav"
        sf.write(output, data, sr_global)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output}")
